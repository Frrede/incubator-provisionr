{"tagline":"Simple Service for Managing Pools of 10s or 100s of Virtual Machines","name":"Axemblr Provisionr","body":"With Provisionr we want to solve the problem of cloud portability by hiding completely the API and only focusing on building a cluster that matches the same set of assumptions on all clouds, assumptions like: running a specific operating system (e.g. Ubuntu LTS), having the same set of pre-installed packages and binaries, sane dns settings (forward & reverse ip resolution - as needed for [Hadoop](http://hadoop.apache.org/)), ntp settings, networking settings, ssh admin access, vpn access etc.\r\n\r\nFeatures\r\n--------\r\n\r\n* Can provision 10s or 100s of virtual machines across multiple clouds\r\n* Fully persistent granular internal workflows based on [Activiti](http://activiti.org/)\r\n* The application server can be restarted at any time with no impact\r\n* Has a modular architecture based on OSGi and [Apache Karaf](http://karaf.apache.org/)\r\n* Can be used as an interactive tool or as a REST service (work in progress) \r\n\r\nHow does it look like?\r\n----------------------\r\n\r\nFor each cloud provider we define an Activiti pool management process similar to this:\r\n\r\n![Sample pool management process](http://people.apache.org/~asavu/sample.bpmn20.png)\r\n\r\nYou can use Activiti Explorer to inspect the process while running:\r\n\r\n![Activiti Explorer](http://people.apache.org/~asavu/explorer.png)\r\n\r\n... and manage everything from an interactive shell:\r\n\r\n![Shell](http://people.apache.org/~asavu/shell.png)\r\n\r\nWho is behind this?\r\n-------------------\r\n\r\nCore developers:\r\n\r\n* Andrei Savu - asavu@axemblr.com - [LinkedIn](http://www.linkedin.com/in/sandrei), [Github](https://github.com/andreisavu)\r\n* Ioan Eugen Stan - ieugen@axemblr.com - [LinkedIn](http://www.linkedin.com/in/ieugen), [Github](https://github.com/ieugen)\r\n\r\nLicense\r\n-------\r\n\r\nApache License Version 2.0\r\nhttp://apache.org/licenses/LICENSE-2.0.txt\r\n\r\nGet involved in the community \r\n-----------------------------\r\n\r\nFor those of you who really dig our software, we have created two mailing lists that yo can join depending on your involvement: \r\n\r\n* If you are a user join: [provisionr-users@googlegroups.com](https://groups.google.com/forum/?fromgroups#!forum/provisionr-users)\r\n* If you wish to develop Provisionr go to [provisionr-dev@googlegroups.com](https://groups.google.com/forum/?fromgroups#!forum/provisionr-dev)\r\n\r\nJoin us on IRC channel *#axemblr* on *irc.freenode.net*.\r\n\r\nWe appreciate any kind of help so don't heasitate. \r\n\r\n\r\nSupported cloud providers\r\n-------------------------\r\n\r\nWe are working on making all this run as expected on [Amazon EC2](http://aws.amazon.com/ec2/) & [CloudStack](http://incubator.apache.org/cloudstack/) \r\n\r\nHow to create a distribution?\r\n-----------------------------\r\n\r\nYou can build a binary release by running:\r\n\r\n    $ ./scripts/create_distribution.sh \r\n\r\nAnd you will find the .tar.gz file in:\r\n\r\n    karaf/assembly/target/com.axemblr.provisionr-*.tar.gz\r\n\r\nHow to run?\r\n-----------\r\n\r\nExtract the custom Karaf distribution:\r\n\r\n    $ cd karaf/assembly/target/\r\n    $ tar xvfz com.axemblr.provisionr-0.0.1-SNAPSHOT.tar.gz\r\n    $ cd com.axemblr.provisionr-0.0.1-SNAPSHOT\r\n\r\nStart and configure the Amazon provisionr:\r\n\r\n    $ ./bin/provisionr\r\n    provisionr [0.0.1-SNAPSHOT] $ config:edit com.axemblr.provisionr.amazon\r\n    provisionr [0.0.1-SNAPSHOT] $ config:proplist\r\n        service.pid = com.axemblr.provisionr.amazon\r\n        secretKey = secret\r\n        felix.fileinstall.filename = file:[...]/etc/com.axemblr.provisionr.amazon.cfg\r\n        region = us-east-1\r\n        accessKey = access\r\n    provisionr [0.0.1-SNAPSHOT] $ config:propset accessKey \"XXXXXXX\"\r\n    provisionr [0.0.1-SNAPSHOT] $ config:propset secretKey \"XXXXXXX\"\r\n    provisionr [0.0.1-SNAPSHOT] $ config:update\r\n    provisionr [0.0.1-SNAPSHOT] $ config:list \"(service.pid=com.axemblr.provisionr.amazon)\"\r\n\r\nCreate a pool:\r\n\r\n    provisionr [0.0.1-SNAPSHOT] $ provisionr:create --id amazon --key mypool --size 2 --hardware-type m1.small\r\n    provisionr [0.0.1-SNAPSHOT] $ provisionr:pools \r\n    Pool{provider=Provider{id='amazon', endpoint='', accessKey='XXXXXXX', options='{region=us-east-1}'}, \r\n    network=Network{type=default, ingress=[Rule{cidr=0.0.0.0/0, ports=(-1?-1], protocol=ICMP}, \r\n    Rule{cidr=0.0.0.0/0, ports=[22?22], protocol=TCP}], options={}}, adminAccess=AdminAccess{username='andreisavu', \r\n    publicKey='ssh-rsa ....'}, software=Software{baseOperatingSystem='default', files={}, \r\n    packages=[git-core, vim], options={}}, hardware=Hardware{type='t1.micro', options={}}, minSize=1, \r\n    cacheBaseImage=false, expectedSize=1, bootstrapTimeInSeconds=900, options={}}\r\n    Business Key: mypool\r\n\r\nYou should see an Activiti process in execution:\r\n\r\n    provisionr [0.0.1-SNAPSHOT] $ activiti:list\r\n\r\n    BPMN Deployments\r\n    ----------------\r\n     ID   Name                               Deployment Time         \r\n    [1  ][com.axemblr.provisionr.amazon    ][Dec 13, 2012 1:52:05 PM]\r\n    [5  ][com.axemblr.provisionr.cloudstack][Dec 13, 2012 1:52:07 PM]\r\n\r\n    BPMN Process Definitions\r\n    -------------------------\r\n     Definition ID   Name            Ver  Resource                                \r\n    [amazon:1:4    ][Amazon Process][1  ][OSGI-INF/activiti/amazon.bpmn20.xml    ]\r\n    [cloudstack:1:8][cloudstack    ][1  ][OSGI-INF/activiti/cloudstack.bpmn20.xml]\r\n\r\n    History of BPMN Process Instances\r\n    ---------------------------------\r\n     Def  Ins  Sta  End \r\n\r\n    Active BPMN Process Instances\r\n    -----------------------------\r\n     Definition  Ins  Executions    \r\n    [amazon:1:4][9  ][13,14,16,19,9]\r\n\r\nMake sure you also check the Activiti Explorer at (login kermit:kermit): \r\n\r\n    http://localhost:8181/activiti-explorer/\r\n\r\nIf you want to manage Apache Karaf you can access the webconsole at\r\n\r\n    http://localhost:8181/system/console\r\n\r\nAnd don't forget to destroy the pool\r\n\r\n    provisionr [0.0.1-SNAPSHOT] $ provisionr:destroy --id amazon --key mypool    \r\n\r\nHow to build?\r\n-------------\r\n\r\nMaven as usual:\r\n\r\n    $ mvn clean install \r\n\r\nThis will download dependencies, compile the sources and run unit tests and some of the integration tests (karaf feature install)\r\n\r\nHow to test?\r\n------------\r\n\r\nAll the unit tests are executed as part of the normal build.\r\n\r\nFor SSH tests we assume the current user can do \"ssh localhost\" and authenticate\r\nautomatically using the local ssh keys. \r\n\r\nYou can run tests against a specific cloud provider for individual activities by running:\r\n\r\n    $ ./scripts/activities_test.sh ID # (amazon or cloudstack)\r\n\r\nOr you can the test the pool management process as a whole by running:\r\n\r\n    $ ./scripts/process_test.sh ID # (amazon or cloudstack) \r\n\r\nYour cloud provider credentials should be in ~/.m2/settings.xml or sent as system properties\r\n\r\n```xml\r\n<profiles>\r\n    <profile>\r\n        <id>provisionr-credentials</id>\r\n        <activation><activeByDefault>true</activeByDefault></activation>\r\n        <properties>\r\n            <test.cloudstack.provider.accessKey>cs-key</test.cloudstack.provider.accessKey>\r\n            <test.cloudstack.provider.secretKey>cs-secret</test.cloudstack.provider.secretKey>\r\n            <test.cloudstack.provider.endpoint>...</test.cloudstack.provider.endpoint>\r\n            <test.cloudstack.provider.zoneId>1</test.cloudstack.provider.zoneId>\r\n            <test.cloudstack.provider.templateId>3012</test.cloudstack.provider.templateId>\r\n            <test.cloudstack.provider.serviceOffering>105</test.cloudstack.provider.serviceOffering>\r\n\r\n            <test.amazon.provider.accessKey>xxxxx</test.amazon.provider.accessKey>\r\n            <test.amazon.provider.secretKey>xxxxx</test.amazon.provider.secretKey>\r\n            <test.amazon.provider.region>us-east-1</test.amazon.provider.region>\r\n        </properties>\r\n    </profile>\r\n</profiles>\r\n```\r\n\r\nThanks! \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}